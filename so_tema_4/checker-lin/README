Tema Sisteme de operare 4

Pentru rezolvarea temei am folosit mai multe structuri printre care:

scheduler_t:
quantum: timpul alocat unui thread pe procesor
io_devices: numarul de device-uri IO
curr_thread: thread-ul curent de pe procesor
thread_no: numarul de thread-uri create
ready: o coada cu thread-uri in starea READY
terminated: o coada cu thread-uri in starea TERMINATED
waiting: vectori de cozi pentru fiecare device io, in firecare coada gasindu-se
thread-uri in starea waiting
finished: semafor pentru semnalizarea terminarii tuturor thread-urilor
lock: mutex folosit pentru diferite operatii

thread_t:
id: thread id
priority: prioritatea thread-ului
function: functia ce trebuie executata
planned: semafor pentru semnalizare terminarii planificarii
running: semfaor pentru a semnaliza ca un thread ruleaza pe procesor

queue_t, list_t:
O coada de prioritati implementata cu ajutorul unei liste inlantuite

Implementare:

int so_init(unsigned int time_quantum, unsigned int io):
Initializeaza campurile scheduler-ului, alocand memorie pentru fiecare
si punand valoarea initiala corespunzatoare.

tid_t so_fork(so_handler *func, unsigned int priority):
Creeaza un thread nou alocand o structura thread_t cu functia si
prioritatea corespunzatoare. Odata ce planfificarea thread-ului este
realizata de functia start_thread aceasta returneaza id-ul thread-ului.

int so_wait(unsigned int io):
Pune thread-ul in starea waiting si este adaugat in coada specifica io. Acesta
asteapta pana cand ajunge din nou in starea running. De asemenea se trece
primul thread din coada ready in starea running.

int so_signal(unsigned int io):
Semnalizeaza toate thread-urile asociate lui io ca acestea pot trece din
waiting in ready,urmand a fi planificate si ulterior a rula pentru a semnaliza
semaforul din so_wait.

void so_exec(void):
Incrementeaza timpul thread-ului curent de pe de procesor. Daca acesta atinge
limita quantum din scheduler acesta este trecut in starea ready si urmatorul
thread din coada ready este setat ca si current_thread. Daca un thread din
coada ready are prioritatea mai mare,iarasi thread-ul curent este schimbat.

void so_end(void):
Elibereaza toate resursele alocate de init

Pentru compilare se foloseste comanda make

Nu am reusit sa fac toate testele sa treaca, nu reusesc sa imi dau seama de
unde vine problema.

Daia Gabriel 331CB